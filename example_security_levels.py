#!/usr/bin/env python3
"""
Ejemplo de configuraci√≥n y uso de niveles de seguridad
Demuestra c√≥mo configurar y usar el sistema de seguridad multinivel
"""

import os
import sys
from security_levels import MultiLevelSecurity, SecurityLevel, setup_multi_level_security
from obs_manager_secure import SecureOBSManager


def demo_security_levels():
    """Demostraci√≥n del sistema de niveles de seguridad"""
    print("üîê Demo: Sistema de Niveles de Seguridad")
    print("=" * 50)

    # Verificar si ya existe configuraci√≥n de seguridad
    security = MultiLevelSecurity()

    print("\nüìã Niveles de Seguridad Disponibles:")
    print("1. READ_ONLY    - Operaciones de solo lectura (list, search, download)")
    print("2. STANDARD     - Operaciones est√°ndar (archive, restore, warm)")
    print("3. DESTRUCTIVE  - Operaciones destructivas (delete, purge)")
    print("4. ADMIN        - Operaciones administrativas (bucket management)")

    print("\nüéØ Ejemplo de Configuraci√≥n:")
    print("- READ_ONLY: Sin contrase√±a (libre acceso)")
    print("- STANDARD: Contrase√±a 'standard123'")
    print("- DESTRUCTIVE: Contrase√±a 'delete456!'")
    print("- ADMIN: Contrase√±a 'admin789@'")

    return security


def demo_operations():
    """Demostrar operaciones con diferentes niveles de seguridad"""
    print("\nüß™ Probando Operaciones con Niveles de Seguridad")
    print("=" * 50)

    try:
        # Inicializar OBS Manager con seguridad
        obs_manager = SecureOBSManager(enable_security_levels=True)

        print("\n1. üìñ Operaci√≥n READ_ONLY (sin contrase√±a)")
        print("   Intentando listar objetos...")
        # Esta operaci√≥n deber√≠a funcionar sin contrase√±a si READ_ONLY no tiene contrase√±a

        print("\n2. üîß Operaci√≥n STANDARD (requiere contrase√±a)")
        print("   Intentando cambiar clase de almacenamiento...")
        print("   Se te pedir√° la contrase√±a para nivel STANDARD")

        print("\n3. ‚ö†Ô∏è  Operaci√≥n DESTRUCTIVE (requiere contrase√±a + confirmaci√≥n)")
        print("   Intentando eliminar objetos...")
        print("   Se te pedir√° la contrase√±a para nivel DESTRUCTIVE")
        print("   Y confirmaci√≥n adicional por ser operaci√≥n destructiva")

        obs_manager.close()

    except Exception as e:
        print(f"‚ùå Error en demo: {e}")


def create_example_config():
    """Crear configuraci√≥n de ejemplo para testing"""
    print("\nüîß Creando Configuraci√≥n de Ejemplo")
    print("=" * 40)

    # Configuraci√≥n de ejemplo (solo para demostraci√≥n)
    example_config = {
        "levels": {
            SecurityLevel.READ_ONLY: {
                "password_hash": None,  # Sin contrase√±a
                "operations": ["list", "search", "download"],
                "description": "Read-only operations (list, search, download)",
            },
            SecurityLevel.STANDARD: {
                "password_hash": "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3",  # "hello"
                "operations": ["archive", "warm", "restore"],
                "description": "Standard operations (archive, restore, change storage class)",
            },
            SecurityLevel.DESTRUCTIVE: {
                "password_hash": "ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f",  # "secret123"
                "operations": ["delete", "purge"],
                "description": "Destructive operations (delete objects, purge buckets)",
            },
            SecurityLevel.ADMIN: {
                "password_hash": "c1c224b03cd9bc7b6a86d77f5dace40191766c485cd55dc48caf9ac873335d6f",  # "admin456"
                "operations": ["create_bucket", "delete_bucket", "manage_permissions"],
                "description": "Administrative operations (bucket management)",
            },
        },
        "settings": {"require_confirmation": True, "log_all_operations": True, "session_timeout": 3600},
    }

    print("üìù Configuraci√≥n de ejemplo:")
    print("- READ_ONLY: Sin contrase√±a")
    print("- STANDARD: Contrase√±a 'hello'")
    print("- DESTRUCTIVE: Contrase√±a 'secret123'")
    print("- ADMIN: Contrase√±a 'admin456'")

    return example_config


def interactive_security_demo():
    """Demo interactivo del sistema de seguridad"""
    print("\nüéÆ Demo Interactivo")
    print("=" * 30)

    while True:
        print("\nOpciones disponibles:")
        print("1. Ver niveles de seguridad configurados")
        print("2. Configurar niveles de seguridad")
        print("3. Probar operaci√≥n READ_ONLY")
        print("4. Probar operaci√≥n STANDARD")
        print("5. Probar operaci√≥n DESTRUCTIVE")
        print("6. Salir")

        try:
            choice = input("Selecciona opci√≥n (1-6): ").strip()

            if choice == "1":
                security = MultiLevelSecurity()
                security.list_security_levels()

            elif choice == "2":
                setup_multi_level_security()

            elif choice == "3":
                print("\nüìñ Probando operaci√≥n READ_ONLY...")
                try:
                    obs_manager = SecureOBSManager(enable_security_levels=True)
                    # Simular operaci√≥n de listado
                    print("‚ÑπÔ∏è  Esta operaci√≥n requerir√≠a credenciales v√°lidas de OBS")
                    obs_manager.close()
                except Exception as e:
                    print(f"‚ÑπÔ∏è  Demo: {e}")

            elif choice == "4":
                print("\nüîß Probando operaci√≥n STANDARD...")
                try:
                    obs_manager = SecureOBSManager(enable_security_levels=True)
                    # Simular operaci√≥n de archivo
                    print("‚ÑπÔ∏è  Esta operaci√≥n requerir√≠a credenciales v√°lidas de OBS")
                    obs_manager.close()
                except Exception as e:
                    print(f"‚ÑπÔ∏è  Demo: {e}")

            elif choice == "5":
                print("\n‚ö†Ô∏è  Probando operaci√≥n DESTRUCTIVE...")
                try:
                    obs_manager = SecureOBSManager(enable_security_levels=True)
                    # Simular operaci√≥n destructiva
                    print("‚ÑπÔ∏è  Esta operaci√≥n requerir√≠a credenciales v√°lidas de OBS")
                    obs_manager.close()
                except Exception as e:
                    print(f"‚ÑπÔ∏è  Demo: {e}")

            elif choice == "6":
                print("üëã ¬°Hasta luego!")
                break

            else:
                print("‚ùå Opci√≥n inv√°lida")

        except KeyboardInterrupt:
            print("\nüëã Demo cancelado")
            break
        except Exception as e:
            print(f"‚ùå Error: {e}")


def main():
    """Funci√≥n principal del ejemplo"""
    print("üîê OBS Utils - Ejemplo de Niveles de Seguridad")
    print("=" * 60)

    # Verificar disponibilidad del m√≥dulo
    try:
        from security_levels import MultiLevelSecurity

        print("‚úÖ M√≥dulo de niveles de seguridad disponible")
    except ImportError:
        print("‚ùå M√≥dulo de niveles de seguridad no disponible")
        print("   Instala: pip install cryptography")
        return

    # Demostraci√≥n
    demo_security_levels()
    create_example_config()

    # Preguntar si quiere demo interactivo
    print("\n" + "=" * 60)
    response = input("¬øQuieres probar el demo interactivo? (y/N): ").lower().strip()

    if response in ["y", "yes", "s√≠", "si"]:
        interactive_security_demo()

    print("\nüìñ Para m√°s informaci√≥n:")
    print("- Ejecuta: python obs_utils_improved.py --setup-security-levels")
    print("- Consulta: SECURITY.md")
    print("- Usa: python obs_utils_improved.py --list-security-levels")


if __name__ == "__main__":
    main()
