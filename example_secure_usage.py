#!/usr/bin/env python3
"""
Ejemplo de uso de OBS Utils con funciones de seguridad
Demuestra c√≥mo usar las diferentes opciones de configuraci√≥n segura
"""

import os
import sys
from config import Config
from obs_manager import OBSManager
from security import ConfigSecurity, setup_secure_config

def example_encrypted_config():
    """Ejemplo usando configuraci√≥n cifrada"""
    print("=== Ejemplo: Configuraci√≥n Cifrada ===")
    
    try:
        # Verificar si existe configuraci√≥n cifrada
        security = ConfigSecurity()
        
        if not security.is_encrypted():
            print("No se encontr√≥ configuraci√≥n cifrada.")
            print("Ejecuta: python obs_utils_improved.py --setup-secure-config")
            return
        
        # Cargar configuraci√≥n cifrada
        config = Config(use_encryption=True)
        
        if config.validate_credentials():
            print("‚úÖ Configuraci√≥n cifrada cargada correctamente")
            
            # Usar OBS Manager con configuraci√≥n cifrada
            obs_manager = OBSManager()
            
            # Ejemplo de operaci√≥n
            print("Probando conexi√≥n...")
            # obs_manager.list_objects("test-bucket")  # Descomenta para probar
            
            obs_manager.close()
            print("‚úÖ Conexi√≥n exitosa con configuraci√≥n cifrada")
        else:
            print("‚ùå Credenciales inv√°lidas en configuraci√≥n cifrada")
            
    except Exception as e:
        print(f"‚ùå Error con configuraci√≥n cifrada: {e}")

def example_env_variables():
    """Ejemplo usando variables de entorno"""
    print("\n=== Ejemplo: Variables de Entorno ===")
    
    # Verificar variables de entorno
    required_vars = ['OBS_ACCESS_KEY_ID', 'OBS_SECRET_ACCESS_KEY']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå Variables de entorno faltantes: {missing_vars}")
        print("Configura las variables:")
        for var in missing_vars:
            print(f"  export {var}='tu_valor_aqui'")
        return
    
    try:
        # Cargar configuraci√≥n desde variables de entorno
        config = Config()
        
        if config.validate_credentials():
            print("‚úÖ Variables de entorno configuradas correctamente")
            print(f"Server: {config.get('server')}")
            print(f"Region: {config.get('region')}")
        else:
            print("‚ùå Variables de entorno incompletas")
            
    except Exception as e:
        print(f"‚ùå Error con variables de entorno: {e}")

def example_secure_file():
    """Ejemplo usando archivo con permisos seguros"""
    print("\n=== Ejemplo: Archivo con Permisos Seguros ===")
    
    config_file = "obs_config.json"
    
    if not os.path.exists(config_file):
        print(f"‚ùå Archivo {config_file} no encontrado")
        print("Crea uno con: python obs_utils_improved.py --create-config")
        return
    
    try:
        config = Config(config_file)
        
        # Verificar y corregir permisos
        if os.name != 'nt':  # No Windows
            file_stat = os.stat(config_file)
            if file_stat.st_mode & 0o077:
                print("‚ö†Ô∏è  Archivo tiene permisos inseguros")
                config.secure_file_permissions()
            else:
                print("‚úÖ Permisos de archivo seguros")
        
        if config.validate_credentials():
            print("‚úÖ Configuraci√≥n de archivo v√°lida")
        else:
            print("‚ùå Credenciales inv√°lidas en archivo")
            
    except Exception as e:
        print(f"‚ùå Error con archivo de configuraci√≥n: {e}")

def example_security_operations():
    """Ejemplo de operaciones de seguridad"""
    print("\n=== Ejemplo: Operaciones de Seguridad ===")
    
    try:
        security = ConfigSecurity()
        
        # Verificar estado de cifrado
        if security.is_encrypted():
            print("‚úÖ Configuraci√≥n cifrada detectada")
            print(f"Archivos: {security.encrypted_file}, {security.salt_file}")
        else:
            print("‚ÑπÔ∏è  No se detect√≥ configuraci√≥n cifrada")
        
        # Ejemplo de cambio de contrase√±a (comentado para evitar ejecuci√≥n accidental)
        # print("Para cambiar contrase√±a:")
        # print("security.change_password()")
        
    except ImportError:
        print("‚ùå M√≥dulo de seguridad no disponible")
        print("Instala: pip install cryptography")

def example_multiple_configs():
    """Ejemplo usando m√∫ltiples configuraciones"""
    print("\n=== Ejemplo: M√∫ltiples Configuraciones ===")
    
    configs = {
        "Producci√≥n": "prod_config.json",
        "Desarrollo": "dev_config.json", 
        "Testing": "test_config.json"
    }
    
    for env_name, config_file in configs.items():
        if os.path.exists(config_file):
            try:
                config = Config(config_file)
                if config.validate_credentials():
                    print(f"‚úÖ {env_name}: Configuraci√≥n v√°lida ({config_file})")
                else:
                    print(f"‚ùå {env_name}: Credenciales inv√°lidas ({config_file})")
            except Exception as e:
                print(f"‚ùå {env_name}: Error cargando {config_file} - {e}")
        else:
            print(f"‚ÑπÔ∏è  {env_name}: Archivo {config_file} no encontrado")

def interactive_security_setup():
    """Setup interactivo de seguridad"""
    print("\n=== Setup Interactivo de Seguridad ===")
    
    print("¬øQuieres configurar seguridad ahora?")
    print("1. S√≠, configurar cifrado")
    print("2. S√≠, mostrar gu√≠a de variables de entorno")
    print("3. S√≠, crear archivo con permisos seguros")
    print("4. No, salir")
    
    try:
        choice = input("Selecciona opci√≥n (1-4): ").strip()
        
        if choice == "1":
            setup_secure_config()
        elif choice == "2":
            print("\nConfigura estas variables de entorno:")
            print("export OBS_ACCESS_KEY_ID='tu_access_key'")
            print("export OBS_SECRET_ACCESS_KEY='tu_secret_key'")
            print("export OBS_SERVER='https://obs.sa-peru-1.myhuaweicloud.com/'")
            print("export OBS_REGION='sa-peru-1'")
            print("\nLuego ejecuta: source ~/.bashrc")
        elif choice == "3":
            config = Config()
            config.create_sample_config()
            config.secure_file_permissions()
        elif choice == "4":
            print("Setup cancelado")
        else:
            print("Opci√≥n inv√°lida")
            
    except KeyboardInterrupt:
        print("\nSetup cancelado por el usuario")

def main():
    """Funci√≥n principal de ejemplos"""
    print("üîí OBS Utils - Ejemplos de Uso Seguro")
    print("=" * 50)
    
    # Ejecutar ejemplos
    example_encrypted_config()
    example_env_variables()
    example_secure_file()
    example_security_operations()
    example_multiple_configs()
    
    # Setup interactivo opcional
    interactive_security_setup()
    
    print("\n" + "=" * 50)
    print("‚úÖ Ejemplos completados")
    print("\nPara m√°s informaci√≥n:")
    print("- Consulta SECURITY.md")
    print("- Ejecuta: python obs_utils_improved.py --help")
    print("- Usa: python obs_utils_improved.py --setup-secure-config")

if __name__ == "__main__":
    main()
